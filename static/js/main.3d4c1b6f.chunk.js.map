{"version":3,"sources":["contexts/TodoContext.jsx","components/InputTodo.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","useStyles","makeStyles","theme","container","padding","inputField","width","inputButton","InputTodo","useState","buttonVariant","setButtonVariant","useContext","todo","setTodo","task","setTask","addTodo","newTodo","push","isComplete","classes","className","TextField","id","label","value","onChange","e","target","onKeyDown","key","handleKeyDown","InputProps","endAdornment","InputAdornment","Button","variant","color","size","onClick","onMouseEnter","onMouseLeave","TodoList","List","map","index","Divider","ListItem","ListItemIcon","Checkbox","updateTodoStatus","ListItemText","primary","ListItemSecondaryAction","IconButton","splice","deleteTodo","App","todoProvider","useMemo","Paper","elevation","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAEaA,EAAcC,wBAAc,I,2CCMnCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACtCC,UAAW,CACVC,QAAS,MAEVC,WAAY,CACXC,MAAO,QAERC,YAAa,CACZH,QAAS,UAuDII,EAnDG,WAAO,IAAD,EACmBC,mBAAS,YAD5B,mBAChBC,EADgB,KACDC,EADC,OAEEC,qBAAWd,GAA5Be,EAFe,EAEfA,KAAMC,EAFS,EAETA,QAFS,EAGEL,mBAAS,IAHX,mBAGfM,EAHe,KAGTC,EAHS,KAKhBC,EAAU,WACd,IAAIC,EAAO,YAAOL,GAClBK,EAAQC,KAAK,CACXN,KAAME,EACNK,YAAY,IAEdN,EAAQI,IASLG,EAAUrB,IAEhB,OACC,yBAAKsB,UAAWD,EAAQlB,WACvB,kBAACoB,EAAA,EAAD,CACCC,GAAG,OAAOC,MAAM,OACZH,UAAWD,EAAQhB,WACnBqB,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAAIZ,EAAQY,EAAEC,OAAOH,QAChCI,UAAW,SAAAF,GAAC,OAfI,SAAAA,GACN,UAAVA,EAAEG,KACJd,IAakBe,CAAcJ,IAClCK,WAAY,CACXC,aACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCC,QAAS3B,EACT4B,MAAM,UACNC,KAAK,QACGjB,UAAWD,EAAQd,YACnBiC,QAASvB,EACjBwB,aAAc,kBAAM9B,EAAiB,cAC7B+B,aAAc,kBAAM/B,EAAiB,cAP9C,a,wFCQQgC,EAjDE,WAAO,IAAD,EACK/B,qBAAWd,GAA7Be,EADa,EACbA,KAAMC,EADO,EACPA,QAcd,OACE,kBAAC8B,EAAA,EAAD,KAEI/B,EAAKgC,KAAI,SAACnB,EAAOoB,GACf,OACE,yBAAKf,IAAG,eAAUe,IAChB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE1B,GAAE,mBAAcsB,GAChBR,MAAM,UACNX,SAAU,kBAlBH,SAAAmB,GACvB,IAAI5B,EAAO,YAAOL,GAClBK,EAAQ4B,GAAO1B,YAAcF,EAAQ4B,GAAO1B,WAC5CN,EAAQI,GAewBiC,CAAiBL,OAInCpB,EAAMN,WACJ,6BAAK,kBAACgC,EAAA,EAAD,CAAcC,QAAS3B,EAAMb,QAClC,kBAACuC,EAAA,EAAD,CAAcC,QAAS3B,EAAMb,OAEjC,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYf,QAAS,kBAjClB,SAAAM,GACjB,IAAI5B,EAAO,YAAOL,GAClBK,EAAQsC,OAAOV,EAAO,GACtBhC,EAAQI,GA8BiCuC,CAAWX,KACpC,kBAAC,IAAD,e,QCtBLY,G,MApBH,WAAO,IAAD,EACQjD,mBAAS,CAC/B,CACI,KAAQ,mBACR,YAAc,KAJJ,mBACTI,EADS,KACHC,EADG,KAQV6C,EAAeC,mBAAQ,iBAAO,CAAE/C,OAAMC,aAAY,CAACD,EAAMC,IAE/D,OACE,kBAAC+C,EAAA,EAAD,CAAOC,UAAW,GAChB,kBAAChE,EAAYiE,SAAb,CAAsBrC,MAAOiC,GAC3B,kBAAC,EAAD,MACA,kBAAC,EAAD,UCTYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d4c1b6f.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport const TodoContext = createContext([])\n","import React, { useState, useContext } from 'react'\nimport {TodoContext} from '../contexts/TodoContext'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles(theme => ({\n\tcontainer: {\n\t\tpadding: '2%',\n\t},\n\tinputField: {\n\t\twidth: '100%'\n\t},\n\tinputButton: {\n\t\tpadding: '1%'\n\t}\n}))\n\nconst InputTodo = () => {\n\tconst [buttonVariant, setButtonVariant] = useState('outlined')\n  const {todo, setTodo} = useContext(TodoContext)\n  const [task, setTask] = useState('')\n\n  const addTodo = () => {\n    let newTodo = [...todo]\n    newTodo.push({\n      todo: task,\n      isComplete: false\n    })\n    setTodo(newTodo)\n  }\n\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      addTodo(task)\n    }\n  }\n\n\tconst classes = useStyles()\n\n\treturn (\n\t\t<div className={classes.container}>\n\t\t\t<TextField\n\t\t\t\tid='todo' label='Todo'\n        className={classes.inputField}\n        value={task}\n        onChange={e => setTask(e.target.value)}\n        onKeyDown={e => handleKeyDown(e)}\n\t\t\t\tInputProps={{\n\t\t\t\t\tendAdornment:\n\t\t\t\t\t\t<InputAdornment>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant={buttonVariant}\n\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\tsize='small'\n                className={classes.inputButton}\n                onClick={addTodo}\n\t\t\t\t\t\t\t\tonMouseEnter={() => setButtonVariant('contained')}\n                onMouseLeave={() => setButtonVariant('outlined')}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd\n              </Button>\n\t\t\t\t\t\t</InputAdornment>\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default InputTodo","import React, { useState, useContext } from 'react'\nimport { TodoContext } from '../contexts/TodoContext'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Divider from '@material-ui/core/Divider';\n\nconst TodoList = () => {\n  const { todo, setTodo } = useContext(TodoContext)\n\n  const deleteTodo = index => {\n    let newTodo = [...todo]\n    newTodo.splice(index, 1)\n    setTodo(newTodo)\n  }\n\n  const updateTodoStatus = index => {\n    let newTodo = [...todo]\n    newTodo[index].isComplete = !newTodo[index].isComplete\n    setTodo(newTodo)\n  }\n\n  return (\n    <List>\n      {\n        todo.map((value, index) => {\n          return (\n            <div key={`todo-${index}`}>\n              <Divider />\n              <ListItem>\n                <ListItemIcon>\n                  <Checkbox\n                    id={`checkbox-${index}`}\n                    color='primary'\n                    onChange={() => updateTodoStatus(index)}\n                  />\n                </ListItemIcon>\n                {\n                  value.isComplete ?\n                    <del><ListItemText primary={value.todo} /></del> :\n                    <ListItemText primary={value.todo} />\n                }\n                <ListItemSecondaryAction>\n                  <IconButton onClick={() => deleteTodo(index)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            </div>\n          )\n        })\n      }\n    </List>\n  )\n}\n\nexport default TodoList","import React, { useState, useMemo } from 'react';\nimport { TodoContext } from './contexts/TodoContext'\nimport InputTodo from './components/InputTodo'\nimport TodoList from './components/TodoList'\nimport Paper from '@material-ui/core/Paper';\nimport './App.css';\n\nconst App = () => {\n  const [todo, setTodo] = useState([\n    {\n        'todo': 'create todo list',\n        'isComplete': false\n    }\n  ])\n\n  const todoProvider = useMemo(() => ({ todo, setTodo }), [todo, setTodo])\n  \n  return (\n    <Paper elevation={2}>\n      <TodoContext.Provider value={todoProvider}>\n        <InputTodo />\n        <TodoList />\n      </TodoContext.Provider>\n    </Paper>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}